"""Initial migration

Revision ID: acd0f6e073d6
Revises:
Create Date: 2025-10-24 19:13:26.656419

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = 'acd0f6e073d6'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('affiliations',
    sa.Column('affiliation_id', sa.Integer(), nullable=False),
    sa.Column('affiliation_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('affiliation_id'),
    sa.UniqueConstraint('affiliation_name')
    )
    op.create_table('ag_treatments',
    sa.Column('ag_treatment_id', sa.Integer(), nullable=False),
    sa.Column('ag_treatment_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('ag_treatment_id')
    )
    op.create_table('analysis_abbreviations',
    sa.Column('analysis_abbreviations_id', sa.Integer(), nullable=False),
    sa.Column('analysis_abbreviation', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('analysis_abbreviations_id'),
    sa.UniqueConstraint('analysis_abbreviation')
    )
    op.create_table('analysis_replicate_id',
    sa.Column('analysis_replicate_id', sa.Integer(), nullable=False),
    sa.Column('result_id', sa.Integer(), nullable=True),
    sa.Column('analysis_types_id', sa.Integer(), nullable=True),
    sa.Column('analysis_replicate_uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('analysis_replicate_id')
    )
    op.create_table('analysis_results',
    sa.Column('result_id', sa.Integer(), nullable=False),
    sa.Column('anlaysis_sample', sa.Integer(), nullable=True),
    sa.Column('experiment_id', sa.Integer(), nullable=True),
    sa.Column('analysis_type_id', sa.Integer(), nullable=True),
    sa.Column('replicate_no', sa.Integer(), nullable=True),
    sa.Column('analysis_timestamp', sa.DateTime(), nullable=True),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.Column('value', sa.Numeric(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('qc_result_id', sa.Integer(), nullable=True),
    sa.Column('measurement_equipment_id', sa.Integer(), nullable=True),
    sa.Column('raw_data_url_id', sa.Integer(), nullable=True),
    sa.Column('analyst_id', sa.Integer(), nullable=True),
    sa.Column('analysis_note', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('result_id')
    )
    op.create_index('idx_analysis_results_parameter_id', 'analysis_results', ['parameter_id'], unique=False)
    op.create_index('uq_analysis_results_experiment_parameter_replicate', 'analysis_results', ['experiment_id', 'parameter_id', 'replicate_no'], unique=True)
    op.create_table('analysis_types',
    sa.Column('analysis_type_id', sa.Integer(), nullable=False),
    sa.Column('analysis_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('analysis_type_id'),
    sa.UniqueConstraint('analysis_name')
    )
    op.create_table('analyst_contact',
    sa.Column('analyst_id', sa.Integer(), nullable=False),
    sa.Column('analyst_first_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('analyst_last_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('analyst_email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('analyst_affiliation', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('analyst_id')
    )
    op.create_table('autoclave_profile',
    sa.Column('autoclave_id', sa.Integer(), nullable=False),
    sa.Column('result_id', sa.Integer(), nullable=True),
    sa.Column('product_type_id', sa.Integer(), nullable=True),
    sa.Column('product_value', sa.Numeric(), nullable=True),
    sa.Column('product_unit_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('autoclave_id')
    )
    op.create_table('biomass',
    sa.Column('biomass_id', sa.Integer(), nullable=False),
    sa.Column('biomass_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('primary_product_id', sa.Integer(), nullable=True),
    sa.Column('taxonomy_id', sa.Integer(), nullable=True),
    sa.Column('biomass_type_id', sa.Integer(), nullable=True),
    sa.Column('biomass_notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('biomass_id')
    )
    op.create_index(op.f('ix_biomass_biomass_name'), 'biomass', ['biomass_name'], unique=False)
    op.create_index(op.f('ix_biomass_biomass_type_id'), 'biomass', ['biomass_type_id'], unique=False)
    op.create_table('biomass_availability',
    sa.Column('availability_id', sa.Integer(), nullable=False),
    sa.Column('biomass_id', sa.Integer(), nullable=False),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.Column('primary_product_id', sa.Integer(), nullable=True),
    sa.Column('from_month', sa.Numeric(), nullable=True),
    sa.Column('to_month', sa.Numeric(), nullable=True),
    sa.Column('kg_low', sa.Numeric(), nullable=True),
    sa.Column('kg_avg', sa.Numeric(), nullable=True),
    sa.Column('kg_high', sa.Numeric(), nullable=True),
    sa.Column('bdt_low', sa.Numeric(), nullable=True),
    sa.Column('bdt_avg', sa.Numeric(), nullable=True),
    sa.Column('bdt_high', sa.Numeric(), nullable=True),
    sa.Column('data_source', sa.Integer(), nullable=True),
    sa.Column('availability_notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('availability_id')
    )
    op.create_index(op.f('ix_biomass_availability_biomass_id'), 'biomass_availability', ['biomass_id'], unique=False)
    op.create_table('biomass_price',
    sa.Column('price_id', sa.Integer(), nullable=False),
    sa.Column('biomass_id', sa.Integer(), nullable=False),
    sa.Column('price_per_kg_low', sa.Numeric(), nullable=True),
    sa.Column('price_per_kg_avg', sa.Numeric(), nullable=True),
    sa.Column('price_per_kg_high', sa.Numeric(), nullable=True),
    sa.Column('price_data_sources', sa.Integer(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('price_id')
    )
    op.create_index(op.f('ix_biomass_price_biomass_id'), 'biomass_price', ['biomass_id'], unique=False)
    op.create_table('biomass_quality',
    sa.Column('quality_id', sa.Integer(), nullable=False),
    sa.Column('biomass_id', sa.Integer(), nullable=False),
    sa.Column('expected_quality', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('output_feedstocks', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('convertibility', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('disposal_challenges', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('existing_markets', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('substitute_materials', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('regulatory_issues', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('quality_data_sources', sa.Integer(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('quality_id')
    )
    op.create_index(op.f('ix_biomass_quality_biomass_id'), 'biomass_quality', ['biomass_id'], unique=False)
    op.create_table('biomass_test',
    sa.Column('biomass_test_id', sa.Integer(), nullable=False),
    sa.Column('biomass_test_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('biomass_test_notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('biomass_test_id')
    )
    op.create_index(op.f('ix_biomass_test_biomass_test_name'), 'biomass_test', ['biomass_test_name'], unique=False)
    op.create_table('biomass_type',
    sa.Column('biomass_type_id', sa.Integer(), nullable=False),
    sa.Column('biomass_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('biomass_type_id'),
    sa.UniqueConstraint('biomass_type')
    )
    op.create_table('buildings',
    sa.Column('building_id', sa.Integer(), nullable=False),
    sa.Column('building_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.Column('affiliation_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('building_id'),
    sa.UniqueConstraint('building_name')
    )
    op.create_table('cities',
    sa.Column('city_id', sa.Integer(), nullable=False),
    sa.Column('city_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('city_id'),
    sa.UniqueConstraint('city_name')
    )
    op.create_table('collection_methods',
    sa.Column('collection_method_id', sa.Integer(), nullable=False),
    sa.Column('collection_method_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('collection_method_id'),
    sa.UniqueConstraint('collection_method_name')
    )
    op.create_table('collectors',
    sa.Column('collector_id', sa.Integer(), nullable=False),
    sa.Column('collector_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('collector_affiliation', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('collector_id'),
    sa.UniqueConstraint('collector_name')
    )
    op.create_table('compositional_analysis',
    sa.Column('cmp_id', sa.Integer(), nullable=False),
    sa.Column('result_id', sa.Integer(), nullable=True),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.Column('value', sa.Numeric(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('calculated_parameter_id', sa.Integer(), nullable=True),
    sa.Column('calculated_parameter_value', sa.Numeric(), nullable=True),
    sa.Column('calculated_parameter_unit_id', sa.Integer(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('cmp_id')
    )
    op.create_table('counties',
    sa.Column('county_id', sa.Integer(), nullable=False),
    sa.Column('county_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('county_id'),
    sa.UniqueConstraint('county_name')
    )
    op.create_table('data_sources',
    sa.Column('source_id', sa.Integer(), nullable=False),
    sa.Column('source_name_id', sa.Integer(), nullable=True),
    sa.Column('source_type_id', sa.Integer(), nullable=True),
    sa.Column('data_resolution_id', sa.Integer(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('url_id', sa.Integer(), nullable=True),
    sa.Column('import_timestamp', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('source_id')
    )
    op.create_index('idx_data_sources_source_name_id', 'data_sources', ['source_name_id'], unique=False)
    op.create_table('doi',
    sa.Column('doi_id', sa.Integer(), nullable=False),
    sa.Column('doi', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('doi_id')
    )
    op.create_table('equipment',
    sa.Column('equipment_id', sa.Integer(), nullable=False),
    sa.Column('equipment_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('equipment_room_id', sa.Integer(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('equipment_id'),
    sa.UniqueConstraint('equipment_name')
    )
    op.create_table('experiment_methods',
    sa.Column('experiment_method_id', sa.Integer(), nullable=False),
    sa.Column('experiment_id', sa.Integer(), nullable=True),
    sa.Column('method_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('experiment_method_id')
    )
    op.create_index('idx_experiment_methods_experiment_id', 'experiment_methods', ['experiment_id'], unique=False)
    op.create_index('idx_experiment_methods_method_id', 'experiment_methods', ['method_id'], unique=False)
    op.create_table('experiments',
    sa.Column('experiment_id', sa.Integer(), nullable=False),
    sa.Column('exper_uuid', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('gsheet_exper_id', sa.Integer(), nullable=True),
    sa.Column('analysis_type_id', sa.Integer(), nullable=True),
    sa.Column('analysis_abbrev_id', sa.Integer(), nullable=True),
    sa.Column('exper_start_date', sa.Date(), nullable=True),
    sa.Column('exper_duration', sa.Numeric(), nullable=True),
    sa.Column('exper_duration_unit_id', sa.Integer(), nullable=True),
    sa.Column('exper_location_id', sa.Integer(), nullable=True),
    sa.Column('exper_description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('experiment_id'),
    sa.UniqueConstraint('exper_uuid'),
    sa.UniqueConstraint('gsheet_exper_id')
    )
    op.create_index('idx_experiments_analysis_type_id', 'experiments', ['analysis_type_id'], unique=False)
    op.create_table('external_atip',
    sa.Column('atip_ID', sa.Integer(), nullable=False),
    sa.Column('biomass_id', sa.Integer(), nullable=True),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.Column('value', sa.Numeric(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('geometry_id', sa.Integer(), nullable=True),
    sa.Column('geometry', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('import_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('atip_ID')
    )
    op.create_table('external_dairy_one',
    sa.Column('dairy_one_id', sa.Integer(), nullable=False),
    sa.Column('data_source_id', sa.Integer(), nullable=True),
    sa.Column('biomass_id', sa.Integer(), nullable=True),
    sa.Column('analysis_type_id', sa.Integer(), nullable=True),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.Column('parameter_method_id', sa.Integer(), nullable=True),
    sa.Column('samples_count', sa.Integer(), nullable=True),
    sa.Column('mean_value', sa.Numeric(), nullable=True),
    sa.Column('std_dev', sa.Numeric(), nullable=True),
    sa.Column('min_value', sa.Numeric(), nullable=True),
    sa.Column('max_value', sa.Numeric(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('methodology_reference_id', sa.Integer(), nullable=True),
    sa.Column('accumulated_years_from', sa.Date(), nullable=True),
    sa.Column('accumulated_years_to', sa.Date(), nullable=True),
    sa.Column('import_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('dairy_one_id')
    )
    op.create_index('idx_external_dairy_one_biomass_id', 'external_dairy_one', ['biomass_id'], unique=False)
    op.create_index('idx_external_dairy_one_parameter_id', 'external_dairy_one', ['parameter_id'], unique=False)
    op.create_table('external_ebmud',
    sa.Column('ebmud_id', sa.Integer(), nullable=False),
    sa.Column('data_source_id', sa.Integer(), nullable=True),
    sa.Column('biomass_id', sa.Integer(), nullable=True),
    sa.Column('analysis_type_id', sa.Integer(), nullable=True),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.Column('parameter_method_id', sa.Integer(), nullable=True),
    sa.Column('mean_value', sa.Numeric(), nullable=True),
    sa.Column('std_dev', sa.Numeric(), nullable=True),
    sa.Column('min_value', sa.Numeric(), nullable=True),
    sa.Column('max_value', sa.Numeric(), nullable=True),
    sa.Column('sample_count', sa.Integer(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('import_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('ebmud_id')
    )
    op.create_table('external_inl_biofeedstock_library',
    sa.Column('bfl_id', sa.Integer(), nullable=False),
    sa.Column('data_source_id', sa.Integer(), nullable=True),
    sa.Column('sample_id', sa.Integer(), nullable=True),
    sa.Column('biomass_id', sa.Integer(), nullable=True),
    sa.Column('analysis_type_id', sa.Integer(), nullable=True),
    sa.Column('state_id', sa.Integer(), nullable=True),
    sa.Column('affiliations_id', sa.Integer(), nullable=True),
    sa.Column('harvest_method_id', sa.Integer(), nullable=True),
    sa.Column('collection_method_id', sa.Integer(), nullable=True),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.Column('parameter_method_id', sa.Integer(), nullable=True),
    sa.Column('mean_value', sa.Numeric(), nullable=True),
    sa.Column('std_dev', sa.Numeric(), nullable=True),
    sa.Column('min_value', sa.Numeric(), nullable=True),
    sa.Column('max_value', sa.Numeric(), nullable=True),
    sa.Column('sample_count', sa.Integer(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('methodology_reference_id', sa.Integer(), nullable=True),
    sa.Column('accumulated_years_from', sa.Date(), nullable=True),
    sa.Column('accumulated_years_to', sa.Date(), nullable=True),
    sa.Column('import_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('bfl_id')
    )
    op.create_index('idx_external_inl_biofeedstock_library_biomass_id', 'external_inl_biofeedstock_library', ['biomass_id'], unique=False)
    op.create_table('external_land_id',
    sa.Column('land_id', sa.Integer(), nullable=False),
    sa.Column('biomass_id', sa.Integer(), nullable=True),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.Column('value', sa.Numeric(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('geometry_id', sa.Integer(), nullable=True),
    sa.Column('geometry', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('import_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('land_id')
    )
    op.create_table('external_phyllis2',
    sa.Column('phyllis_id', sa.Integer(), nullable=False),
    sa.Column('data_source_id', sa.Integer(), nullable=True),
    sa.Column('biomass_id', sa.Integer(), nullable=True),
    sa.Column('analysis_type_id', sa.Integer(), nullable=True),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.Column('parameter_method_id', sa.Integer(), nullable=True),
    sa.Column('mean_value', sa.Numeric(), nullable=True),
    sa.Column('std_dev', sa.Numeric(), nullable=True),
    sa.Column('max_value', sa.Numeric(), nullable=True),
    sa.Column('sample_count', sa.Integer(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('methodology_reference_id', sa.Integer(), nullable=True),
    sa.Column('import_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('phyllis_id')
    )
    op.create_index('idx_external_phyllis2_analysis_type_id', 'external_phyllis2', ['analysis_type_id'], unique=False)
    op.create_index('idx_external_phyllis2_biomass_id', 'external_phyllis2', ['biomass_id'], unique=False)
    op.create_table('external_usda',
    sa.Column('usda_id', sa.Integer(), nullable=False),
    sa.Column('biomass_id', sa.Integer(), nullable=True),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.Column('value', sa.Numeric(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('geometry_id', sa.Integer(), nullable=True),
    sa.Column('geometry', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('import_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('usda_id')
    )
    op.create_table('fermentation_profile',
    sa.Column('fp_id', sa.Integer(), nullable=False),
    sa.Column('result_id', sa.Integer(), nullable=True),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.Column('value', sa.Numeric(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('organism_id', sa.Integer(), nullable=True),
    sa.Column('product_type_id', sa.Integer(), nullable=True),
    sa.Column('product_value', sa.Numeric(), nullable=True),
    sa.Column('product_unit_id', sa.Integer(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('fp_id')
    )
    op.create_table('field_samples',
    sa.Column('sample_id', sa.Integer(), nullable=False),
    sa.Column('biomass_id', sa.Integer(), nullable=False),
    sa.Column('sample_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('source_codename_id', sa.Integer(), nullable=True),
    sa.Column('data_source_id', sa.Integer(), nullable=True),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.Column('field_storage_id', sa.Integer(), nullable=True),
    sa.Column('field_storage_duration_value', sa.Numeric(), nullable=True),
    sa.Column('field_storage_duration_unit_id', sa.Integer(), nullable=True),
    sa.Column('collection_timestamp', sa.DateTime(), nullable=True),
    sa.Column('collection_method_id', sa.Integer(), nullable=True),
    sa.Column('harvest_method_id', sa.Integer(), nullable=True),
    sa.Column('harvest_date', sa.Date(), nullable=True),
    sa.Column('amount_collected_kg', sa.Numeric(), nullable=True),
    sa.Column('provider_id', sa.Integer(), nullable=True),
    sa.Column('collector_id', sa.Integer(), nullable=True),
    sa.Column('basic_sample_info_note', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('sample_id')
    )
    op.create_index(op.f('ix_field_samples_biomass_id'), 'field_samples', ['biomass_id'], unique=False)
    op.create_index(op.f('ix_field_samples_source_codename_id'), 'field_samples', ['source_codename_id'], unique=False)
    op.create_table('field_storage',
    sa.Column('field_storage_id', sa.Integer(), nullable=False),
    sa.Column('storage_method', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('field_storage_id'),
    sa.UniqueConstraint('storage_method')
    )
    op.create_table('fips',
    sa.Column('fips_id', sa.Integer(), nullable=False),
    sa.Column('fips_description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('fips_id')
    )
    op.create_table('gasification_profile',
    sa.Column('gasification_id', sa.Integer(), nullable=False),
    sa.Column('result_id', sa.Integer(), nullable=True),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.Column('value', sa.Numeric(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('product_type_id', sa.Integer(), nullable=True),
    sa.Column('product_value', sa.Numeric(), nullable=True),
    sa.Column('product_unit_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('gasification_id')
    )
    op.create_table('geographic_locations',
    sa.Column('location_id', sa.Integer(), nullable=False),
    sa.Column('street_address_id', sa.Integer(), nullable=True),
    sa.Column('city_id', sa.Integer(), nullable=True),
    sa.Column('zip_id', sa.Integer(), nullable=True),
    sa.Column('county_id', sa.Integer(), nullable=True),
    sa.Column('state_id', sa.Integer(), nullable=True),
    sa.Column('region_id', sa.Integer(), nullable=True),
    sa.Column('fips_id', sa.Integer(), nullable=True),
    sa.Column('latitude', sa.Numeric(), nullable=True),
    sa.Column('longitude', sa.Numeric(), nullable=True),
    sa.Column('location_resolution_id', sa.Integer(), nullable=True),
    sa.Column('is_anonymous', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('location_id')
    )
    op.create_table('harvest_methods',
    sa.Column('harvest_method_id', sa.Integer(), nullable=False),
    sa.Column('harvest_method_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('harvest_method_id'),
    sa.UniqueConstraint('harvest_method_name')
    )
    op.create_table('icp_analysis',
    sa.Column('icp_id', sa.Integer(), nullable=False),
    sa.Column('result_id', sa.Integer(), nullable=True),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.Column('value', sa.Numeric(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('concentration_calculation_url_id', sa.Integer(), nullable=True),
    sa.Column('result_wavelength', sa.Numeric(), nullable=True),
    sa.Column('raw_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('icp_id')
    )
    op.create_table('import_log',
    sa.Column('import_id', sa.Integer(), nullable=False),
    sa.Column('import_timestamp', sa.DateTime(), nullable=True),
    sa.Column('destination', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('source_file', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('source_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('records_imported', sa.Integer(), nullable=True),
    sa.Column('import_status', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('error_log', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('import_user', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('import_id')
    )
    op.create_table('location_resolutions',
    sa.Column('location_resolution_id', sa.Integer(), nullable=False),
    sa.Column('resolution_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('location_resolution_id'),
    sa.UniqueConstraint('resolution_type')
    )
    op.create_table('metadata',
    sa.Column('metadata_id', sa.Integer(), nullable=False),
    sa.Column('sample_id', sa.Integer(), nullable=True),
    sa.Column('ag_treatment_id', sa.Integer(), nullable=True),
    sa.Column('last_application_date', sa.Date(), nullable=True),
    sa.Column('treatment_amount_per_acre', sa.Numeric(), nullable=True),
    sa.Column('soil_type', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('metadata_id')
    )
    op.create_table('method_abbrevs',
    sa.Column('method_abbrev_id', sa.Integer(), nullable=False),
    sa.Column('method_abbrev', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('method_abbrev_id'),
    sa.UniqueConstraint('method_abbrev')
    )
    op.create_table('method_categories',
    sa.Column('method_category_id', sa.Integer(), nullable=False),
    sa.Column('method_category', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('method_category_id'),
    sa.UniqueConstraint('method_category')
    )
    op.create_table('method_equipment',
    sa.Column('method_equipment_id', sa.Integer(), nullable=False),
    sa.Column('method_id', sa.Integer(), nullable=True),
    sa.Column('equipment_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('method_equipment_id')
    )
    op.create_index('idx_method_equipment_equipment_id', 'method_equipment', ['equipment_id'], unique=False)
    op.create_index('idx_method_equipment_method_id', 'method_equipment', ['method_id'], unique=False)
    op.create_table('method_standards',
    sa.Column('method_standard_id', sa.Integer(), nullable=False),
    sa.Column('method_standard', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('method_standard_id'),
    sa.UniqueConstraint('method_standard')
    )
    op.create_table('methods',
    sa.Column('method_id', sa.Integer(), nullable=False),
    sa.Column('method_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('method_abbrev_id', sa.Integer(), nullable=True),
    sa.Column('method_category_id', sa.Integer(), nullable=True),
    sa.Column('method_standard_id', sa.Integer(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('detection_limits', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('procedure_reference_id', sa.Integer(), nullable=True),
    sa.Column('method_url_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('method_id'),
    sa.UniqueConstraint('method_name')
    )
    op.create_index('idx_methods_method_name', 'methods', ['method_name'], unique=False)
    op.create_table('organisms',
    sa.Column('organism_id', sa.Integer(), nullable=False),
    sa.Column('organism_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('organism_strain_id', sa.Integer(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('organism_id')
    )
    op.create_table('parameter_catagories',
    sa.Column('parameter_catagory_id', sa.Integer(), nullable=False),
    sa.Column('parameter_catagory', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('parameter_catagory_id')
    )
    op.create_table('parameter_methods',
    sa.Column('param_method_id', sa.Integer(), nullable=False),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.Column('method_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('param_method_id')
    )
    op.create_table('parameter_units',
    sa.Column('parameter_unit_id', sa.Integer(), nullable=False),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('parameter_unit_id')
    )
    op.create_index('idx_parameter_units_parameter_id', 'parameter_units', ['parameter_id'], unique=False)
    op.create_index('idx_parameter_units_unit_id', 'parameter_units', ['unit_id'], unique=False)
    op.create_table('parameters',
    sa.Column('parameter_id', sa.Integer(), nullable=False),
    sa.Column('parameter_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('parameter_category_id', sa.Integer(), nullable=True),
    sa.Column('standard_unit_id', sa.Integer(), nullable=True),
    sa.Column('calculated', sa.Boolean(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('typical_range_min', sa.Numeric(), nullable=True),
    sa.Column('typical_range_max', sa.Numeric(), nullable=True),
    sa.PrimaryKeyConstraint('parameter_id'),
    sa.UniqueConstraint('parameter_name')
    )
    op.create_table('particle_size',
    sa.Column('particle_size_id', sa.Integer(), nullable=False),
    sa.Column('sample_id', sa.Integer(), nullable=True),
    sa.Column('particle_length', sa.Integer(), nullable=True),
    sa.Column('particle_width', sa.Integer(), nullable=True),
    sa.Column('particle_height', sa.Integer(), nullable=True),
    sa.Column('particle_units', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('particle_size_id')
    )
    op.create_table('preprocessed_samples',
    sa.Column('prepro_material_id', sa.Integer(), nullable=False),
    sa.Column('prepro_material_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('biomass_sample_id', sa.Integer(), nullable=True),
    sa.Column('prepro_method_id', sa.Integer(), nullable=True),
    sa.Column('amount_before_drying_g', sa.Numeric(), nullable=True),
    sa.Column('amount_after_drying', sa.Numeric(), nullable=True),
    sa.Column('processing_date', sa.Date(), nullable=True),
    sa.Column('storage_building', sa.Integer(), nullable=True),
    sa.Column('amount_remaining_g', sa.Numeric(), nullable=True),
    sa.Column('amount_as_of_date', sa.Date(), nullable=True),
    sa.Column('prepro_analyst_id', sa.Integer(), nullable=True),
    sa.Column('prepro_note', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('prepro_material_id')
    )
    op.create_index('idx_preprocessed_samples_biomass_sample_id', 'preprocessed_samples', ['biomass_sample_id'], unique=False)
    op.create_index('idx_preprocessed_samples_prepro_method_id', 'preprocessed_samples', ['prepro_method_id'], unique=False)
    op.create_table('preprocessing_methods',
    sa.Column('prepro_method_id', sa.Integer(), nullable=False),
    sa.Column('prepro_method', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('prepro_method_abbrev_id', sa.Integer(), nullable=True),
    sa.Column('prepro_temp_c', sa.Numeric(), nullable=True),
    sa.Column('drying_step', sa.Boolean(), nullable=True),
    sa.Column('method_ref_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('prepro_method_id')
    )
    op.create_table('preprocessing_methods_abbreviations',
    sa.Column('prepro_methods_abbrev_id', sa.Integer(), nullable=False),
    sa.Column('prepro_method_abbrev', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('prepro_methods_abbrev_id'),
    sa.UniqueConstraint('prepro_method_abbrev')
    )
    op.create_table('primary_product',
    sa.Column('primary_product_id', sa.Integer(), nullable=False),
    sa.Column('primary_product_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('primary_product_id'),
    sa.UniqueConstraint('primary_product_name')
    )
    op.create_table('product_type',
    sa.Column('product_type_id', sa.Integer(), nullable=False),
    sa.Column('product', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('product_type_id')
    )
    op.create_table('provider_types',
    sa.Column('provider_type_id', sa.Integer(), nullable=False),
    sa.Column('provider_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('provider_type_id')
    )
    op.create_table('providers',
    sa.Column('provider_id', sa.Integer(), nullable=False),
    sa.Column('provider_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('provider_affiliation', sa.Integer(), nullable=True),
    sa.Column('provider_type_id', sa.Integer(), nullable=True),
    sa.Column('anonymous', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('provider_id'),
    sa.UniqueConstraint('provider_name')
    )
    op.create_table('proximate_analysis',
    sa.Column('prox_id', sa.Integer(), nullable=False),
    sa.Column('result_id', sa.Integer(), nullable=True),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.Column('value', sa.Numeric(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('prox_id')
    )
    op.create_table('qc_results',
    sa.Column('qc_result_id', sa.Integer(), nullable=False),
    sa.Column('qc_result', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('qc_result_id'),
    sa.UniqueConstraint('qc_result')
    )
    op.create_table('raster_metadata',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('source', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('resolution', sa.Float(), nullable=True),
    sa.Column('srid', sa.Integer(), nullable=True),
    sa.Column('acquisition_date', sa.Date(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('references',
    sa.Column('reference_id', sa.Integer(), nullable=False),
    sa.Column('reference_title', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('reference_author', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('reference_publication', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('reference_date', sa.Date(), nullable=True),
    sa.Column('reference_doi_id', sa.Integer(), nullable=True),
    sa.Column('url_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('reference_id')
    )
    op.create_table('regions',
    sa.Column('region_id', sa.Integer(), nullable=False),
    sa.Column('region_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('region_id'),
    sa.UniqueConstraint('region_name')
    )
    op.create_table('rooms',
    sa.Column('room_id', sa.Integer(), nullable=False),
    sa.Column('room_number', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('building_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('room_id'),
    sa.UniqueConstraint('room_number')
    )
    op.create_table('soil_type',
    sa.Column('soil_type_id', sa.Integer(), nullable=False),
    sa.Column('soil_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('soil_location', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('soil_type_id'),
    sa.UniqueConstraint('soil_type')
    )
    op.create_table('source_names',
    sa.Column('source_name_id', sa.Integer(), nullable=False),
    sa.Column('source_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('source_name_id'),
    sa.UniqueConstraint('source_name')
    )
    op.create_table('source_types',
    sa.Column('source_type_id', sa.Integer(), nullable=False),
    sa.Column('source_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('source_type_id'),
    sa.UniqueConstraint('source_type')
    )
    op.create_table('states',
    sa.Column('state_id', sa.Integer(), nullable=False),
    sa.Column('state_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('state_id'),
    sa.UniqueConstraint('state_name')
    )
    op.create_table('street_addresses',
    sa.Column('street_address_id', sa.Integer(), nullable=False),
    sa.Column('street_address', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('street_address_id')
    )
    op.create_table('taxonomy',
    sa.Column('taxonomy_id', sa.Integer(), nullable=False),
    sa.Column('kingdom', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('phylum', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('class_', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('order', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('family', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('genus', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('species', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('variety_subspecies_cultivar', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('taxonomy_id')
    )
    op.create_table('testusers2',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('fullname', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('nickname', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('units',
    sa.Column('unit_id', sa.Integer(), nullable=False),
    sa.Column('unit', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('unit_id'),
    sa.UniqueConstraint('unit')
    )
    op.create_table('url',
    sa.Column('url_id', sa.Integer(), nullable=False),
    sa.Column('url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('url_id'),
    sa.UniqueConstraint('url')
    )
    op.create_table('vectorized_raster_polygons',
    sa.Column('vectorized_ID', sa.Integer(), nullable=False),
    sa.Column('geometry', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('raster_id', sa.Integer(), nullable=True),
    sa.Column('class_', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('value', sa.Float(), nullable=True),
    sa.Column('mean_value', sa.Float(), nullable=True),
    sa.Column('std_dev', sa.Float(), nullable=True),
    sa.Column('area_m2', sa.Float(), nullable=True),
    sa.Column('date_acquired', sa.Date(), nullable=True),
    sa.Column('source', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('vectorized_ID')
    )
    op.create_table('xrf_analysis',
    sa.Column('xrf_id', sa.Integer(), nullable=False),
    sa.Column('result_id', sa.Integer(), nullable=True),
    sa.Column('parameter_id', sa.Integer(), nullable=True),
    sa.Column('value', sa.Numeric(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('xrf_id')
    )
    op.create_table('zips',
    sa.Column('zip_id', sa.Integer(), nullable=False),
    sa.Column('zip_code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('zip_id'),
    sa.UniqueConstraint('zip_code')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('zips')
    op.drop_table('xrf_analysis')
    op.drop_table('vectorized_raster_polygons')
    op.drop_table('url')
    op.drop_table('units')
    op.drop_table('testusers2')
    op.drop_table('taxonomy')
    op.drop_table('street_addresses')
    op.drop_table('states')
    op.drop_table('source_types')
    op.drop_table('source_names')
    op.drop_table('soil_type')
    op.drop_table('rooms')
    op.drop_table('regions')
    op.drop_table('references')
    op.drop_table('raster_metadata')
    op.drop_table('qc_results')
    op.drop_table('proximate_analysis')
    op.drop_table('providers')
    op.drop_table('provider_types')
    op.drop_table('product_type')
    op.drop_table('primary_product')
    op.drop_table('preprocessing_methods_abbreviations')
    op.drop_table('preprocessing_methods')
    op.drop_index('idx_preprocessed_samples_prepro_method_id', table_name='preprocessed_samples')
    op.drop_index('idx_preprocessed_samples_biomass_sample_id', table_name='preprocessed_samples')
    op.drop_table('preprocessed_samples')
    op.drop_table('particle_size')
    op.drop_table('parameters')
    op.drop_index('idx_parameter_units_unit_id', table_name='parameter_units')
    op.drop_index('idx_parameter_units_parameter_id', table_name='parameter_units')
    op.drop_table('parameter_units')
    op.drop_table('parameter_methods')
    op.drop_table('parameter_catagories')
    op.drop_table('organisms')
    op.drop_index('idx_methods_method_name', table_name='methods')
    op.drop_table('methods')
    op.drop_table('method_standards')
    op.drop_index('idx_method_equipment_method_id', table_name='method_equipment')
    op.drop_index('idx_method_equipment_equipment_id', table_name='method_equipment')
    op.drop_table('method_equipment')
    op.drop_table('method_categories')
    op.drop_table('method_abbrevs')
    op.drop_table('metadata')
    op.drop_table('location_resolutions')
    op.drop_table('import_log')
    op.drop_table('icp_analysis')
    op.drop_table('harvest_methods')
    op.drop_table('geographic_locations')
    op.drop_table('gasification_profile')
    op.drop_table('fips')
    op.drop_table('field_storage')
    op.drop_index(op.f('ix_field_samples_source_codename_id'), table_name='field_samples')
    op.drop_index(op.f('ix_field_samples_biomass_id'), table_name='field_samples')
    op.drop_table('field_samples')
    op.drop_table('fermentation_profile')
    op.drop_table('external_usda')
    op.drop_index('idx_external_phyllis2_biomass_id', table_name='external_phyllis2')
    op.drop_index('idx_external_phyllis2_analysis_type_id', table_name='external_phyllis2')
    op.drop_table('external_phyllis2')
    op.drop_table('external_land_id')
    op.drop_index('idx_external_inl_biofeedstock_library_biomass_id', table_name='external_inl_biofeedstock_library')
    op.drop_table('external_inl_biofeedstock_library')
    op.drop_table('external_ebmud')
    op.drop_index('idx_external_dairy_one_parameter_id', table_name='external_dairy_one')
    op.drop_index('idx_external_dairy_one_biomass_id', table_name='external_dairy_one')
    op.drop_table('external_dairy_one')
    op.drop_table('external_atip')
    op.drop_index('idx_experiments_analysis_type_id', table_name='experiments')
    op.drop_table('experiments')
    op.drop_index('idx_experiment_methods_method_id', table_name='experiment_methods')
    op.drop_index('idx_experiment_methods_experiment_id', table_name='experiment_methods')
    op.drop_table('experiment_methods')
    op.drop_table('equipment')
    op.drop_table('doi')
    op.drop_index('idx_data_sources_source_name_id', table_name='data_sources')
    op.drop_table('data_sources')
    op.drop_table('counties')
    op.drop_table('compositional_analysis')
    op.drop_table('collectors')
    op.drop_table('collection_methods')
    op.drop_table('cities')
    op.drop_table('buildings')
    op.drop_table('biomass_type')
    op.drop_index(op.f('ix_biomass_test_biomass_test_name'), table_name='biomass_test')
    op.drop_table('biomass_test')
    op.drop_index(op.f('ix_biomass_quality_biomass_id'), table_name='biomass_quality')
    op.drop_table('biomass_quality')
    op.drop_index(op.f('ix_biomass_price_biomass_id'), table_name='biomass_price')
    op.drop_table('biomass_price')
    op.drop_index(op.f('ix_biomass_availability_biomass_id'), table_name='biomass_availability')
    op.drop_table('biomass_availability')
    op.drop_index(op.f('ix_biomass_biomass_type_id'), table_name='biomass')
    op.drop_index(op.f('ix_biomass_biomass_name'), table_name='biomass')
    op.drop_table('biomass')
    op.drop_table('autoclave_profile')
    op.drop_table('analyst_contact')
    op.drop_table('analysis_types')
    op.drop_index('uq_analysis_results_experiment_parameter_replicate', table_name='analysis_results')
    op.drop_index('idx_analysis_results_parameter_id', table_name='analysis_results')
    op.drop_table('analysis_results')
    op.drop_table('analysis_replicate_id')
    op.drop_table('analysis_abbreviations')
    op.drop_table('ag_treatments')
    op.drop_table('affiliations')
    # ### end Alembic commands ###
